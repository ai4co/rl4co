[tool.poetry]
name = "rl4co"
version = "0.5.0.dev2"
description = "RL4CO: an Extensive Reinforcement Learning for Combinatorial Optimization Benchmark"
authors = [
    "Federico Berto <berto.federico2@gmail.com>",
    "Chuanbo Hua <cbhua@kaist.ac.kr>",
    "Junyoung Park <junyoungpark.ml@gmail.com>",
    "Laurin Luttmann <laurin.luttmann@gmail.com>",
    "Yining Ma",
    "Fanchen Bu",
    "Jiarui Wang",
    "Haoran Ye",
    "Minsu Kim",
    "Sanghyeok Choi",
    "Zepeda Gast",
    "Andre Hottung",
    "Jianan Zhou",
    "Jieyi Bi",
    "Yu Hu",
    "Fei Liu",
    "Hyeonah Kim",
    "Jiwoo Son",
    "Haeyeon Kim",
    "Davide Angioni",
    "Wouter Kool",
    "Zhiguang Cao",
    "Jie Zhang",
    "Kijung Shin",
    "Cathy Wu",
    "Sungsoo Ahn",
    "Guojie Song",
    "Changhyun Kwon",
    "Lin Xie",
    "Jinkyoo Park",
    "AI4CO",
]
readme = "README.md"
license = "MIT"
homepage = "https://rl4.co"
repository = "https://github.com/ai4co/rl4co"
documentation = "https://rl4co.readthedocs.io"
keywords = ["reinforcement learning", "combinatorial optimization", "benchmark"]
packages = [{ include = "rl4co" }]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]

[tool.poetry.urls]
"Tracker" = "https://github.com/ai4co/rl4co/issues"

[tool.poetry.dependencies]
# Required dependencies
python = ">=3.8,<4.0"
einops = "*"
hydra-core = "*"
hydra-colorlog = "*"
lightning = ">=2.1.0"
matplotlib = "*"
omegaconf = "*"
pyrootutils = "*"
rich = "*"
robust-downloader = "*"
scipy = "*"
tensordict = ">=0.4.0"
torchrl = ">=0.4.0"
wandb = "*"
# Dev dependencies
black = { version = "*", optional = true }
pre-commit = { version = ">=3.3.3", optional = true }
ruff = { version = "*", optional = true }
pytest = { version = "*", optional = true }
pytest-cov = { version = "*", optional = true }
# Graph
torch_geometric = { version = "*", optional = true }
# Routing
numba = { version = ">=0.58.1", optional = true }
pyvrp = { version = ">=0.8.2", optional = true }
# Docs
mkdocs = { version = "*", optional = true }
mkdocs-material = { version = "*", optional = true }
mkdocstrings-python = { version = "*", optional = true }
mike = { version = "*", optional = true }
mkdocs-jupyter = { version = "*", optional = true }
mkdocs-redirects = { version = "*", optional = true }
mkdocs-autolinks-plugin = { version = "*", optional = true }
griffe-typingdoc = { version = "*", optional = true }
griffe-inherited-docstrings = { version = "*", optional = true }
griffe = { version = "*", optional = true }
mkdocs-same-dir = { version = "*", optional = true }
mdx-breakless-lists = { version = "*", optional = true }
mdx-truly-sane-lists = { version = "*", optional = true }
markdown-gfm-admonition = { version = "*", optional = true }

[tool.poetry.extras]
dev = ["black", "pre-commit", "ruff", "pytest", "pytest-cov"]
graph = ["torch_geometric"]
routing = ["numba", "pyvrp"]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings-python",
    "mike",
    "mkdocs-jupyter",
    "mkdocs-redirects",
    "mkdocs-autolinks-plugin",
    "griffe-typingdoc",
    "griffe-inherited-docstrings",
    "griffe",
    "black", # for formatting docstrings
    "mkdocs-same-dir",
    "mdx-breakless-lists",
    "mdx-truly-sane-lists",
    "markdown-gfm-admonition",
]

[tool.black]
line-length = 90
target-version = ["py311"]
include = '\.pyi?$'
exclude = '''
(
  /(
      \.direnv
    | \.eggs
    | \.git
    | \.tox
    | \.venv
    | _build
    | build
    | dist
    | venv
  )/
)
'''

[tool.ruff]
select = ["F", "E", "W", "I001"]
line-length = 90
show-fixes = false
target-version = "py311"
task-tags = ["TODO", "FIXME"]
ignore = ["E501"] # never enforce `E501` (line length violations), done in Black

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402", "F401"]

[tool.ruff.isort]
known-first-party = []
known-third-party = []
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
combine-as-imports = true
split-on-trailing-comma = false
lines-between-types = 1

[tool.coverage]
include = ["rl4co.*"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Lines to exclude from coverage report (e.g., comments, debug statements)
    "pragma: no cover",
    "if __name__ == .__main__.:",
]

[build-system]
requires = ["poetry"]
build-backend = "poetry.core.masonry.api"